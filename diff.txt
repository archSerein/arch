diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..1e1cdf0 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -63,6 +63,8 @@ void            ramdiskrw(struct buf*);
 void*           kalloc(void);
 void            kfree(void *);
 void            kinit(void);
+void            incr(uint64);
+void            decr(uint64);
 
 // log.c
 void            initlog(int, struct superblock*);
@@ -173,6 +175,8 @@ uint64          walkaddr(pagetable_t, uint64);
 int             copyout(pagetable_t, uint64, char *, uint64);
 int             copyin(pagetable_t, char *, uint64, uint64);
 int             copyinstr(pagetable_t, char *, uint64, uint64);
+int             is_cow_fault(pagetable_t, uint64);
+int             cow_alloc(pagetable_t, uint64);
 
 // plic.c
 void            plicinit(void);
diff --git a/kernel/kalloc.c b/kernel/kalloc.c
index 0699e7e..02e4f4b 100644
--- a/kernel/kalloc.c
+++ b/kernel/kalloc.c
@@ -23,20 +23,44 @@ struct {
   struct run *freelist;
 } kmem;
 
+struct {
+  struct spinlock lock;
+  int count[NPAGE];
+} count_pa;
+
 void
 kinit()
 {
+  initlock(&count_pa.lock, "count_pa");
   initlock(&kmem.lock, "kmem");
   freerange(end, (void*)PHYSTOP);
 }
 
+void incr(uint64 pa)
+{
+  acquire(&count_pa.lock);
+  ++count_pa.count[pa/PGSIZE];
+  release(&count_pa.lock);
+}
+
+void decr(uint64 pa)
+{
+  acquire(&count_pa.lock);
+  --count_pa.count[pa/PGSIZE];
+  release(&count_pa.lock);
+}
+
+
 void
 freerange(void *pa_start, void *pa_end)
 {
   char *p;
   p = (char*)PGROUNDUP((uint64)pa_start);
   for(; p + PGSIZE <= (char*)pa_end; p += PGSIZE)
+  {
+    count_pa.count[(uint64)p/PGSIZE] = 1;
     kfree(p);
+  }
 }
 
 // Free the page of physical memory pointed at by pa,
@@ -46,6 +70,14 @@ freerange(void *pa_start, void *pa_end)
 void
 kfree(void *pa)
 {
+  if(count_pa.count[(uint64)pa/PGSIZE] > 1)
+  {
+    decr((uint64)pa);
+    return;
+  }
+  else{
+    decr((uint64)pa);
+  }
   struct run *r;
 
   if(((uint64)pa % PGSIZE) != 0 || (char*)pa < end || (uint64)pa >= PHYSTOP)
@@ -77,6 +109,9 @@ kalloc(void)
   release(&kmem.lock);
 
   if(r)
+  {
     memset((char*)r, 5, PGSIZE); // fill with junk
+    incr((uint64)r);
+  }
   return (void*)r;
 }
diff --git a/kernel/memlayout.h b/kernel/memlayout.h
index cac3cb1..80f6e58 100644
--- a/kernel/memlayout.h
+++ b/kernel/memlayout.h
@@ -43,6 +43,7 @@
 // from physical address 0x80000000 to PHYSTOP.
 #define KERNBASE 0x80000000L
 #define PHYSTOP (KERNBASE + 128*1024*1024)
+#define NPAGE (PHYSTOP/PGSIZE)
 
 // map the trampoline page to the highest address,
 // in both user and kernel space.
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..560687f 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -105,3 +105,5 @@ struct proc {
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
 };
+
+
diff --git a/kernel/riscv.h b/kernel/riscv.h
index 20a01db..720df2d 100644
--- a/kernel/riscv.h
+++ b/kernel/riscv.h
@@ -343,6 +343,7 @@ typedef uint64 *pagetable_t; // 512 PTEs
 #define PTE_W (1L << 2)
 #define PTE_X (1L << 3)
 #define PTE_U (1L << 4) // user can access
+#define PTE_COW (1L << 8)
 
 // shift a physical address to the right place for a PTE.
 #define PA2PTE(pa) ((((uint64)pa) >> 12) << 10)
diff --git a/kernel/trap.c b/kernel/trap.c
index 512c850..6e2ed56 100644
--- a/kernel/trap.c
+++ b/kernel/trap.c
@@ -6,6 +6,7 @@
 #include "proc.h"
 #include "defs.h"
 
+
 struct spinlock tickslock;
 uint ticks;
 
@@ -67,7 +68,31 @@ usertrap(void)
     syscall();
   } else if((which_dev = devintr()) != 0){
     // ok
-  } else {
+  } else if(r_scause() == 15 || r_scause() == 13)
+  {
+    uint64 va = r_stval();
+    if(va >= MAXVA)
+    {
+      printf("usertrap(): unexpected scause %p pid=%d\n", r_scause(), p->pid);
+      printf("            sepc=%p stval=%p\n", r_sepc(), r_stval());
+      setkilled(p);
+    }
+    if(is_cow_fault(p->pagetable, va))
+    {
+      if(cow_alloc(p->pagetable, va) < 0)
+      {
+        printf("usertrap(): cow_alloc failed\n");
+        p->killed = 1;
+      }
+    }
+    else{
+      printf("usertrap(): unexpected scause %p pid=%d\n", r_scause(), p->pid);
+      printf("            sepc=%p stval=%p\n", r_sepc(), r_stval());
+      setkilled(p);
+    }
+  }
+  else
+  {
     printf("usertrap(): unexpected scause %p pid=%d\n", r_scause(), p->pid);
     printf("            sepc=%p stval=%p\n", r_sepc(), r_stval());
     setkilled(p);
diff --git a/kernel/vm.c b/kernel/vm.c
index 5c31e87..f9d7dc3 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -315,22 +315,28 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
   pte_t *pte;
   uint64 pa, i;
   uint flags;
-  char *mem;
+  // char *mem;
 
   for(i = 0; i < sz; i += PGSIZE){
     if((pte = walk(old, i, 0)) == 0)
       panic("uvmcopy: pte should exist");
     if((*pte & PTE_V) == 0)
       panic("uvmcopy: page not present");
+    if(*pte & PTE_W)
+    {
+      *pte &= ~PTE_W;
+      *pte |= PTE_COW;
+    }
     pa = PTE2PA(*pte);
     flags = PTE_FLAGS(*pte);
-    if((mem = kalloc()) == 0)
-      goto err;
-    memmove(mem, (char*)pa, PGSIZE);
-    if(mappages(new, i, PGSIZE, (uint64)mem, flags) != 0){
-      kfree(mem);
+    // if((mem = kalloc()) == 0)
+    //   goto err;
+    // memmove(mem, (char*)pa, PGSIZE);
+    if(mappages(new, i, PGSIZE, (uint64)pa, flags) != 0){
+      // kfree(mem);
       goto err;
     }
+    incr((uint64)pa); 
   }
   return 0;
 
@@ -363,6 +369,14 @@ copyout(pagetable_t pagetable, uint64 dstva, char *src, uint64 len)
 
   while(len > 0){
     va0 = PGROUNDDOWN(dstva);
+    if(is_cow_fault(pagetable, va0))
+    {
+      if(cow_alloc(pagetable, va0) < 0)
+      {
+        printf("usertrap(): cow_alloc failed\n");
+        return -1;
+      }
+    }
     if(va0 >= MAXVA)
       return -1;
     pte = walk(pagetable, va0, 0);
@@ -449,3 +463,56 @@ copyinstr(pagetable_t pagetable, char *dst, uint64 srcva, uint64 max)
     return -1;
   }
 }
+
+int
+is_cow_fault(pagetable_t pagetable, uint64 va)
+{
+  va = PGROUNDDOWN(va);
+
+  pte_t *pte = walk(pagetable, va, 0);
+
+  if(pte == 0)
+    return 0;
+  if((*pte & PTE_V) == 0)
+    return 0;
+  if((*pte & PTE_U) == 0)
+    return 0; 
+
+  if(*pte & PTE_COW)
+    return 1;
+
+  return 0;
+}
+
+int cow_alloc(pagetable_t pagetable, uint64 va)
+{
+  va = PGROUNDDOWN(va);
+
+  pte_t *pte = walk(pagetable, va, 0);
+  
+  uint64 pa = PTE2PA(*pte);
+
+  uint flag = PTE_FLAGS(*pte);
+  
+  flag &= ~PTE_COW;
+  flag |= PTE_W;
+
+  char *mem = kalloc();
+
+  if(mem == 0)
+  {
+    return -1;
+  }
+
+  memmove(mem, (void *)pa, PGSIZE);
+
+  uvmunmap(pagetable, va, 1, 1);
+
+  if(mappages(pagetable, va, PGSIZE, (uint64) mem, flag) != 0)
+  {
+    kfree(mem);
+    return -1;
+  }
+
+  return 0;
+}
