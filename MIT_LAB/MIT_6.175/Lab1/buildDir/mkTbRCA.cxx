/*
 * Generated by Bluespec Compiler, version 2024.01-19-g4cbd4f58 (build 4cbd4f58)
 * 
 * On Fri Jun 21 06:47:11 UTC 2024
 * 
 */
#include "bluesim_primitives.h"
#include "mkTbRCA.h"
#include "imported_BDPI_functions.h"


/* String declarations */
static std::string const __str_literal_2("FAILED %d + %d gave %d instead of %d", 36u);
static std::string const __str_literal_1("PASSED", 6u);


/* Constructor */
MOD_mkTbRCA::MOD_mkTbRCA(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_cycle(simHdl, "cycle", this, 32u, 0u, (tUInt8)0u),
    INST_randomVal1_ignore(simHdl, "randomVal1_ignore", this, 8u, (tUInt8)0u),
    INST_randomVal1_initialized(simHdl, "randomVal1_initialized", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_randomVal1_zaz(simHdl, "randomVal1_zaz", this, 8u, (tUInt8)0u),
    INST_randomVal2_ignore(simHdl, "randomVal2_ignore", this, 8u, (tUInt8)0u),
    INST_randomVal2_initialized(simHdl, "randomVal2_initialized", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_randomVal2_zaz(simHdl, "randomVal2_zaz", this, 8u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u),
    DEF_v__h691(2863311530u),
    DEF_v__h315(2863311530u)
{
  symbol_count = 13u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkTbRCA::init_symbols_0()
{
  init_symbol(&symbols[0u], "cycle", SYM_MODULE, &INST_cycle);
  init_symbol(&symbols[1u], "RL_randomVal1_every", SYM_RULE);
  init_symbol(&symbols[2u], "RL_randomVal1_every_1", SYM_RULE);
  init_symbol(&symbols[3u], "RL_randomVal2_every", SYM_RULE);
  init_symbol(&symbols[4u], "RL_randomVal2_every_1", SYM_RULE);
  init_symbol(&symbols[5u], "RL_test", SYM_RULE);
  init_symbol(&symbols[6u], "randomVal1_ignore", SYM_MODULE, &INST_randomVal1_ignore);
  init_symbol(&symbols[7u], "randomVal1_initialized", SYM_MODULE, &INST_randomVal1_initialized);
  init_symbol(&symbols[8u], "randomVal1_zaz", SYM_MODULE, &INST_randomVal1_zaz);
  init_symbol(&symbols[9u], "randomVal2_ignore", SYM_MODULE, &INST_randomVal2_ignore);
  init_symbol(&symbols[10u], "randomVal2_initialized", SYM_MODULE, &INST_randomVal2_initialized);
  init_symbol(&symbols[11u], "randomVal2_zaz", SYM_MODULE, &INST_randomVal2_zaz);
  init_symbol(&symbols[12u], "x__h945", SYM_DEF, &DEF_x__h945, 32u);
}


/* Rule actions */

void MOD_mkTbRCA::RL_randomVal1_every()
{
  tUInt8 DEF_new_value__h357;
  if (!(PORT_RST_N == (tUInt8)0u))
    DEF_v__h315 = rand32();
  DEF_new_value__h357 = (tUInt8)((tUInt8)255u & DEF_v__h315);
  INST_randomVal1_zaz.METH_wset(DEF_new_value__h357);
}

void MOD_mkTbRCA::RL_randomVal1_every_1()
{
  DEF_x_wget__h250 = INST_randomVal1_zaz.METH_wget();
  DEF_v__h389 = INST_randomVal1_zaz.METH_whas() ? DEF_x_wget__h250 : (tUInt8)0u;
  INST_randomVal1_ignore.METH_wset(DEF_v__h389);
}

void MOD_mkTbRCA::RL_randomVal2_every()
{
  tUInt8 DEF_new_value__h733;
  if (!(PORT_RST_N == (tUInt8)0u))
    DEF_v__h691 = rand32();
  DEF_new_value__h733 = (tUInt8)((tUInt8)255u & DEF_v__h691);
  INST_randomVal2_zaz.METH_wset(DEF_new_value__h733);
}

void MOD_mkTbRCA::RL_randomVal2_every_1()
{
  DEF_x_wget__h634 = INST_randomVal2_zaz.METH_wget();
  DEF_v__h764 = INST_randomVal2_zaz.METH_whas() ? DEF_x_wget__h634 : (tUInt8)0u;
  INST_randomVal2_ignore.METH_wset(DEF_v__h764);
}

void MOD_mkTbRCA::RL_test()
{
  tUInt8 DEF_high__h1138;
  tUInt32 DEF_x__h2585;
  tUInt8 DEF_y__h1587;
  tUInt8 DEF_x__h1586;
  tUInt8 DEF_y__h1687;
  tUInt8 DEF_y__h1751;
  tUInt8 DEF_x__h1750;
  tUInt8 DEF_y__h1749;
  tUInt8 DEF_x__h1748;
  tUInt8 DEF_y__h1689;
  tUInt8 DEF_x__h1688;
  tUInt8 DEF_x__h1686;
  tUInt8 DEF_y__h1585;
  tUInt8 DEF_x__h1584;
  tUInt8 DEF_y__h1450;
  tUInt8 DEF_x__h1449;
  tUInt8 DEF_y__h1448;
  tUInt8 DEF_x__h1447;
  tUInt8 DEF_y__h1388;
  tUInt8 DEF_x__h1387;
  tUInt8 DEF_y__h1386;
  tUInt8 DEF_x__h1385;
  tUInt8 DEF_y__h1326;
  tUInt8 DEF_x__h1325;
  tUInt8 DEF_y__h1324;
  tUInt8 DEF_x__h1323;
  tUInt8 DEF_y__h1218;
  tUInt8 DEF_x__h1217;
  tUInt8 DEF_y__h1216;
  tUInt8 DEF_x__h1215;
  tUInt8 DEF__theResult___fst__h1147;
  tUInt8 DEF_c__h1204;
  tUInt8 DEF_x__h2220;
  tUInt8 DEF_c__h1312;
  tUInt8 DEF_x__h2276;
  tUInt8 DEF_c__h1374;
  tUInt8 DEF_x__h2332;
  tUInt8 DEF_c__h1436;
  tUInt8 DEF_x__h2388;
  tUInt8 DEF_c__h1573;
  tUInt8 DEF_x__h1932;
  tUInt8 DEF_c__h1675;
  tUInt8 DEF_x__h1988;
  tUInt8 DEF_c__h1737;
  tUInt8 DEF_x__h2044;
  tUInt8 DEF_NOT_cycle_5_EQ_0_6_1_AND_NOT_cycle_5_EQ_128_7__ETC___d100;
  tUInt32 DEF_realAns__h2456;
  tUInt8 DEF_b__h1798;
  tUInt8 DEF_b__h1736;
  tUInt8 DEF_b__h1674;
  tUInt8 DEF_b__h1572;
  tUInt8 DEF_b__h1435;
  tUInt8 DEF_b__h1373;
  tUInt8 DEF_b__h1311;
  tUInt8 DEF_b__h1203;
  tUInt8 DEF_a__h1797;
  tUInt8 DEF_a__h1735;
  tUInt8 DEF_a__h1673;
  tUInt8 DEF_a__h1571;
  tUInt8 DEF_a__h1434;
  tUInt8 DEF_a__h1372;
  tUInt8 DEF_a__h1310;
  tUInt8 DEF_a__h1202;
  tUInt32 DEF_v__h1133;
  DEF_x__h945 = INST_cycle.METH_read();
  DEF_x_wget__h634 = INST_randomVal2_zaz.METH_wget();
  DEF_x_wget__h250 = INST_randomVal1_zaz.METH_wget();
  DEF_v__h389 = INST_randomVal1_zaz.METH_whas() ? DEF_x_wget__h250 : (tUInt8)0u;
  DEF_v__h764 = INST_randomVal2_zaz.METH_whas() ? DEF_x_wget__h634 : (tUInt8)0u;
  DEF_cycle_5_EQ_128___d17 = DEF_x__h945 == 128u;
  DEF_cycle_5_EQ_0___d16 = DEF_x__h945 == 0u;
  DEF_a__h1202 = (tUInt8)(DEF_v__h389 >> 7u);
  DEF_a__h1310 = (tUInt8)((tUInt8)1u & (DEF_v__h389 >> 6u));
  DEF_a__h1372 = (tUInt8)((tUInt8)1u & (DEF_v__h389 >> 5u));
  DEF_a__h1571 = (tUInt8)((tUInt8)1u & (DEF_v__h389 >> 3u));
  DEF_a__h1434 = (tUInt8)((tUInt8)1u & (DEF_v__h389 >> 4u));
  DEF_a__h1673 = (tUInt8)((tUInt8)1u & (DEF_v__h389 >> 2u));
  DEF_a__h1735 = (tUInt8)((tUInt8)1u & (DEF_v__h389 >> 1u));
  DEF_a__h1797 = (tUInt8)((tUInt8)1u & DEF_v__h389);
  DEF_b__h1203 = (tUInt8)(DEF_v__h764 >> 7u);
  DEF_b__h1311 = (tUInt8)((tUInt8)1u & (DEF_v__h764 >> 6u));
  DEF_b__h1373 = (tUInt8)((tUInt8)1u & (DEF_v__h764 >> 5u));
  DEF_b__h1435 = (tUInt8)((tUInt8)1u & (DEF_v__h764 >> 4u));
  DEF_b__h1572 = (tUInt8)((tUInt8)1u & (DEF_v__h764 >> 3u));
  DEF_b__h1674 = (tUInt8)((tUInt8)1u & (DEF_v__h764 >> 2u));
  DEF_b__h1798 = (tUInt8)((tUInt8)1u & DEF_v__h764);
  DEF_b__h1736 = (tUInt8)((tUInt8)1u & (DEF_v__h764 >> 1u));
  DEF_realAns__h2456 = 511u & ((511u & ((((tUInt32)((tUInt8)0u)) << 8u) | (tUInt32)(DEF_v__h389))) + (511u & ((((tUInt32)((tUInt8)0u)) << 8u) | (tUInt32)(DEF_v__h764))));
  DEF_x__h2044 = DEF_a__h1735 ^ DEF_b__h1736;
  DEF_c__h1737 = DEF_a__h1797 & DEF_b__h1798;
  DEF_x__h1988 = DEF_a__h1673 ^ DEF_b__h1674;
  DEF_x__h1932 = DEF_a__h1571 ^ DEF_b__h1572;
  DEF_x__h2388 = DEF_a__h1434 ^ DEF_b__h1435;
  DEF_x__h2276 = DEF_a__h1310 ^ DEF_b__h1311;
  DEF_x__h2332 = DEF_a__h1372 ^ DEF_b__h1373;
  DEF_x__h2220 = DEF_a__h1202 ^ DEF_b__h1203;
  DEF_x__h1217 = DEF_a__h1202 & DEF_b__h1203;
  DEF_x__h1325 = DEF_a__h1310 & DEF_b__h1311;
  DEF_x__h1387 = DEF_a__h1372 & DEF_b__h1373;
  DEF_x__h1449 = DEF_a__h1434 & DEF_b__h1435;
  DEF_x__h1688 = DEF_a__h1673 & DEF_b__h1674;
  DEF_y__h1749 = DEF_b__h1736 & DEF_c__h1737;
  DEF_x__h2585 = DEF_x__h945 + 1u;
  DEF_x__h1750 = DEF_a__h1735 & DEF_b__h1736;
  DEF_y__h1751 = DEF_a__h1735 & DEF_c__h1737;
  DEF_x__h1748 = DEF_x__h1750 | DEF_y__h1751;
  DEF_c__h1675 = DEF_x__h1748 | DEF_y__h1749;
  DEF_y__h1689 = DEF_a__h1673 & DEF_c__h1675;
  DEF_x__h1686 = DEF_x__h1688 | DEF_y__h1689;
  DEF_y__h1687 = DEF_b__h1674 & DEF_c__h1675;
  DEF_c__h1573 = DEF_x__h1686 | DEF_y__h1687;
  DEF_y__h1585 = DEF_b__h1572 & DEF_c__h1573;
  DEF_x__h1586 = DEF_a__h1571 & DEF_b__h1572;
  DEF_y__h1587 = DEF_a__h1571 & DEF_c__h1573;
  DEF_x__h1584 = DEF_x__h1586 | DEF_y__h1587;
  DEF_c__h1436 = DEF_x__h1584 | DEF_y__h1585;
  DEF_y__h1448 = DEF_b__h1435 & DEF_c__h1436;
  DEF_y__h1450 = DEF_a__h1434 & DEF_c__h1436;
  DEF_x__h1447 = DEF_x__h1449 | DEF_y__h1450;
  DEF_c__h1374 = DEF_x__h1447 | DEF_y__h1448;
  DEF_y__h1386 = DEF_b__h1373 & DEF_c__h1374;
  DEF_y__h1388 = DEF_a__h1372 & DEF_c__h1374;
  DEF_x__h1385 = DEF_x__h1387 | DEF_y__h1388;
  DEF_c__h1312 = DEF_x__h1385 | DEF_y__h1386;
  DEF_y__h1324 = DEF_b__h1311 & DEF_c__h1312;
  DEF_y__h1326 = DEF_a__h1310 & DEF_c__h1312;
  DEF_x__h1323 = DEF_x__h1325 | DEF_y__h1326;
  DEF_c__h1204 = DEF_x__h1323 | DEF_y__h1324;
  DEF_y__h1216 = DEF_b__h1203 & DEF_c__h1204;
  DEF_y__h1218 = DEF_a__h1202 & DEF_c__h1204;
  DEF_x__h1215 = DEF_x__h1217 | DEF_y__h1218;
  DEF__theResult___fst__h1147 = DEF_x__h1215 | DEF_y__h1216;
  DEF_high__h1138 = (tUInt8)31u & (((((DEF__theResult___fst__h1147 << 4u) | ((DEF_x__h2220 ^ DEF_c__h1204) << 3u)) | ((DEF_x__h2276 ^ DEF_c__h1312) << 2u)) | ((DEF_x__h2332 ^ DEF_c__h1374) << 1u)) | (DEF_x__h2388 ^ DEF_c__h1436));
  DEF_v__h1133 = 511u & (((((((tUInt32)(DEF_high__h1138)) << 4u) | (((tUInt32)(DEF_x__h1932 ^ DEF_c__h1573)) << 3u)) | (((tUInt32)(DEF_x__h1988 ^ DEF_c__h1675)) << 2u)) | (((tUInt32)(DEF_x__h2044 ^ DEF_c__h1737)) << 1u)) | (tUInt32)(DEF_a__h1797 ^ DEF_b__h1798));
  DEF_NOT_cycle_5_EQ_0_6_1_AND_NOT_cycle_5_EQ_128_7__ETC___d100 = !DEF_cycle_5_EQ_0___d16 && (!DEF_cycle_5_EQ_128___d17 && !(DEF_v__h1133 == DEF_realAns__h2456));
  if (DEF_cycle_5_EQ_0___d16)
    INST_randomVal1_initialized.METH_write((tUInt8)1u);
  if (DEF_cycle_5_EQ_0___d16)
    INST_randomVal2_initialized.METH_write((tUInt8)1u);
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    if (DEF_cycle_5_EQ_128___d17)
      dollar_display(sim_hdl, this, "s", &__str_literal_1);
    if (DEF_cycle_5_EQ_128___d17)
      dollar_finish(sim_hdl, "32", 1u);
    if (DEF_NOT_cycle_5_EQ_0_6_1_AND_NOT_cycle_5_EQ_128_7__ETC___d100)
      dollar_display(sim_hdl,
		     this,
		     "s,8,8,9,9",
		     &__str_literal_2,
		     DEF_v__h389,
		     DEF_v__h764,
		     DEF_v__h1133,
		     DEF_realAns__h2456);
    if (DEF_NOT_cycle_5_EQ_0_6_1_AND_NOT_cycle_5_EQ_128_7__ETC___d100)
      dollar_finish(sim_hdl, "32", 1u);
  }
  INST_cycle.METH_write(DEF_x__h2585);
}


/* Methods */


/* Reset routines */

void MOD_mkTbRCA::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_randomVal2_initialized.reset_RST(ARG_rst_in);
  INST_randomVal1_initialized.reset_RST(ARG_rst_in);
  INST_cycle.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkTbRCA::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkTbRCA::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_cycle.dump_state(indent + 2u);
  INST_randomVal1_ignore.dump_state(indent + 2u);
  INST_randomVal1_initialized.dump_state(indent + 2u);
  INST_randomVal1_zaz.dump_state(indent + 2u);
  INST_randomVal2_ignore.dump_state(indent + 2u);
  INST_randomVal2_initialized.dump_state(indent + 2u);
  INST_randomVal2_zaz.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkTbRCA::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 17u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "cycle_5_EQ_0___d16", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "cycle_5_EQ_128___d17", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h315", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h389", 8u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h691", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h764", 8u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h945", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x_wget__h250", 8u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x_wget__h634", 8u);
  num = INST_cycle.dump_VCD_defs(num);
  num = INST_randomVal1_ignore.dump_VCD_defs(num);
  num = INST_randomVal1_initialized.dump_VCD_defs(num);
  num = INST_randomVal1_zaz.dump_VCD_defs(num);
  num = INST_randomVal2_ignore.dump_VCD_defs(num);
  num = INST_randomVal2_initialized.dump_VCD_defs(num);
  num = INST_randomVal2_zaz.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkTbRCA::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTbRCA &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkTbRCA::vcd_defs(tVCDDumpType dt, MOD_mkTbRCA &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 8u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 8u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 8u);
    vcd_write_x(sim_hdl, num++, 8u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_cycle_5_EQ_0___d16) != DEF_cycle_5_EQ_0___d16)
      {
	vcd_write_val(sim_hdl, num, DEF_cycle_5_EQ_0___d16, 1u);
	backing.DEF_cycle_5_EQ_0___d16 = DEF_cycle_5_EQ_0___d16;
      }
      ++num;
      if ((backing.DEF_cycle_5_EQ_128___d17) != DEF_cycle_5_EQ_128___d17)
      {
	vcd_write_val(sim_hdl, num, DEF_cycle_5_EQ_128___d17, 1u);
	backing.DEF_cycle_5_EQ_128___d17 = DEF_cycle_5_EQ_128___d17;
      }
      ++num;
      if ((backing.DEF_v__h315) != DEF_v__h315)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h315, 32u);
	backing.DEF_v__h315 = DEF_v__h315;
      }
      ++num;
      if ((backing.DEF_v__h389) != DEF_v__h389)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h389, 8u);
	backing.DEF_v__h389 = DEF_v__h389;
      }
      ++num;
      if ((backing.DEF_v__h691) != DEF_v__h691)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h691, 32u);
	backing.DEF_v__h691 = DEF_v__h691;
      }
      ++num;
      if ((backing.DEF_v__h764) != DEF_v__h764)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h764, 8u);
	backing.DEF_v__h764 = DEF_v__h764;
      }
      ++num;
      if ((backing.DEF_x__h945) != DEF_x__h945)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h945, 32u);
	backing.DEF_x__h945 = DEF_x__h945;
      }
      ++num;
      if ((backing.DEF_x_wget__h250) != DEF_x_wget__h250)
      {
	vcd_write_val(sim_hdl, num, DEF_x_wget__h250, 8u);
	backing.DEF_x_wget__h250 = DEF_x_wget__h250;
      }
      ++num;
      if ((backing.DEF_x_wget__h634) != DEF_x_wget__h634)
      {
	vcd_write_val(sim_hdl, num, DEF_x_wget__h634, 8u);
	backing.DEF_x_wget__h634 = DEF_x_wget__h634;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_cycle_5_EQ_0___d16, 1u);
      backing.DEF_cycle_5_EQ_0___d16 = DEF_cycle_5_EQ_0___d16;
      vcd_write_val(sim_hdl, num++, DEF_cycle_5_EQ_128___d17, 1u);
      backing.DEF_cycle_5_EQ_128___d17 = DEF_cycle_5_EQ_128___d17;
      vcd_write_val(sim_hdl, num++, DEF_v__h315, 32u);
      backing.DEF_v__h315 = DEF_v__h315;
      vcd_write_val(sim_hdl, num++, DEF_v__h389, 8u);
      backing.DEF_v__h389 = DEF_v__h389;
      vcd_write_val(sim_hdl, num++, DEF_v__h691, 32u);
      backing.DEF_v__h691 = DEF_v__h691;
      vcd_write_val(sim_hdl, num++, DEF_v__h764, 8u);
      backing.DEF_v__h764 = DEF_v__h764;
      vcd_write_val(sim_hdl, num++, DEF_x__h945, 32u);
      backing.DEF_x__h945 = DEF_x__h945;
      vcd_write_val(sim_hdl, num++, DEF_x_wget__h250, 8u);
      backing.DEF_x_wget__h250 = DEF_x_wget__h250;
      vcd_write_val(sim_hdl, num++, DEF_x_wget__h634, 8u);
      backing.DEF_x_wget__h634 = DEF_x_wget__h634;
    }
}

void MOD_mkTbRCA::vcd_prims(tVCDDumpType dt, MOD_mkTbRCA &backing)
{
  INST_cycle.dump_VCD(dt, backing.INST_cycle);
  INST_randomVal1_ignore.dump_VCD(dt, backing.INST_randomVal1_ignore);
  INST_randomVal1_initialized.dump_VCD(dt, backing.INST_randomVal1_initialized);
  INST_randomVal1_zaz.dump_VCD(dt, backing.INST_randomVal1_zaz);
  INST_randomVal2_ignore.dump_VCD(dt, backing.INST_randomVal2_ignore);
  INST_randomVal2_initialized.dump_VCD(dt, backing.INST_randomVal2_initialized);
  INST_randomVal2_zaz.dump_VCD(dt, backing.INST_randomVal2_zaz);
}
