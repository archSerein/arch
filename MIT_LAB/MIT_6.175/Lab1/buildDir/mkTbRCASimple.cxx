/*
 * Generated by Bluespec Compiler, version 2024.01-19-g4cbd4f58 (build 4cbd4f58)
 * 
 * On Fri Jun 21 06:47:12 UTC 2024
 * 
 */
#include "bluesim_primitives.h"
#include "mkTbRCASimple.h"


/* String declarations */
static std::string const __str_literal_2("%d + %d = %d", 12u);
static std::string const __str_literal_3("FAILED %d + %d gave %d instead of %d", 36u);
static std::string const __str_literal_1("PASSED", 6u);


/* Constructor */
MOD_mkTbRCASimple::MOD_mkTbRCASimple(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_cycle(simHdl, "cycle", this, 32u, 0u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u)
{
  symbol_count = 2u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkTbRCASimple::init_symbols_0()
{
  init_symbol(&symbols[0u], "cycle", SYM_MODULE, &INST_cycle);
  init_symbol(&symbols[1u], "RL_test", SYM_RULE);
}


/* Rule actions */

void MOD_mkTbRCASimple::RL_test()
{
  tUInt8 DEF_high__h191;
  tUInt32 DEF_x__h2300;
  tUInt8 DEF_y__h1434;
  tUInt8 DEF_x__h1433;
  tUInt8 DEF_y__h1432;
  tUInt8 DEF_x__h1431;
  tUInt8 DEF_y__h1372;
  tUInt8 DEF_x__h1371;
  tUInt8 DEF_y__h1370;
  tUInt8 DEF_x__h1369;
  tUInt8 DEF_y__h1270;
  tUInt8 DEF_x__h1269;
  tUInt8 DEF_y__h1268;
  tUInt8 DEF_x__h1267;
  tUInt8 DEF_y__h1133;
  tUInt8 DEF_x__h1132;
  tUInt8 DEF_y__h1131;
  tUInt8 DEF_x__h1130;
  tUInt8 DEF_y__h1071;
  tUInt8 DEF_x__h1070;
  tUInt8 DEF_y__h1069;
  tUInt8 DEF_x__h1068;
  tUInt8 DEF_y__h1009;
  tUInt8 DEF_x__h1008;
  tUInt8 DEF_y__h1007;
  tUInt8 DEF_x__h1006;
  tUInt8 DEF_y__h279;
  tUInt8 DEF_x__h278;
  tUInt8 DEF_y__h277;
  tUInt8 DEF_x__h276;
  tUInt8 DEF__theResult___fst__h200;
  tUInt8 DEF_c__h1890;
  tUInt8 DEF_x__h1901;
  tUInt8 DEF_c__h995;
  tUInt8 DEF_x__h1957;
  tUInt8 DEF_c__h1057;
  tUInt8 DEF_x__h2013;
  tUInt8 DEF_c__h1119;
  tUInt8 DEF_x__h2069;
  tUInt8 DEF_c__h1256;
  tUInt8 DEF_x__h1613;
  tUInt8 DEF_c__h1358;
  tUInt8 DEF_x__h1669;
  tUInt8 DEF_c__h1420;
  tUInt8 DEF_x__h1725;
  tUInt8 DEF_NOT_cycle_EQ_8_AND_SEL_ARR_1_8_63_102_177_128__ETC___d83;
  tUInt8 DEF_NOT_cycle_EQ_8_AND_NOT_SEL_ARR_1_8_63_102_177__ETC___d85;
  tUInt32 DEF_realAns__h2137;
  tUInt8 DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_7_ETC___d82;
  tUInt8 DEF_b__h1481;
  tUInt8 DEF_b__h1419;
  tUInt8 DEF_b__h1357;
  tUInt8 DEF_b__h1255;
  tUInt8 DEF_b__h1118;
  tUInt8 DEF_b__h1056;
  tUInt8 DEF_b__h994;
  tUInt8 DEF_b__h1889;
  tUInt8 DEF_a__h1480;
  tUInt8 DEF_a__h1418;
  tUInt8 DEF_a__h1356;
  tUInt8 DEF_a__h1254;
  tUInt8 DEF_a__h1117;
  tUInt8 DEF_a__h1055;
  tUInt8 DEF_a__h993;
  tUInt8 DEF_a__h1888;
  tUInt32 DEF_x__h679;
  tUInt8 DEF_NOT_cycle_EQ_8___d3;
  tUInt32 DEF_v__h186;
  tUInt8 DEF_cycle_EQ_8___d2;
  tUInt8 DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8;
  tUInt8 DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5;
  DEF_x__h679 = INST_cycle.METH_read();
  switch (DEF_x__h679) {
  case 0u:
    DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5 = (tUInt8)1u;
    break;
  case 1u:
    DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5 = (tUInt8)8u;
    break;
  case 2u:
    DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5 = (tUInt8)63u;
    break;
  case 3u:
    DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5 = (tUInt8)102u;
    break;
  case 4u:
    DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5 = (tUInt8)177u;
    break;
  case 5u:
    DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5 = (tUInt8)128u;
    break;
  case 6u:
  case 7u:
    DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5 = (tUInt8)255u;
    break;
  default:
    DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5 = (tUInt8)170u;
  }
  switch (DEF_x__h679) {
  case 0u:
  case 6u:
    DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8 = (tUInt8)1u;
    break;
  case 1u:
    DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8 = (tUInt8)8u;
    break;
  case 2u:
    DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8 = (tUInt8)27u;
    break;
  case 3u:
    DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8 = (tUInt8)92u;
    break;
  case 4u:
    DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8 = (tUInt8)202u;
    break;
  case 5u:
    DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8 = (tUInt8)128u;
    break;
  case 7u:
    DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8 = (tUInt8)255u;
    break;
  default:
    DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8 = (tUInt8)170u;
  }
  DEF_cycle_EQ_8___d2 = DEF_x__h679 == 8u;
  DEF_NOT_cycle_EQ_8___d3 = !DEF_cycle_EQ_8___d2;
  DEF_a__h1888 = (tUInt8)(DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5 >> 7u);
  DEF_a__h1055 = (tUInt8)((tUInt8)1u & (DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5 >> 5u));
  DEF_a__h993 = (tUInt8)((tUInt8)1u & (DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5 >> 6u));
  DEF_a__h1117 = (tUInt8)((tUInt8)1u & (DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5 >> 4u));
  DEF_a__h1254 = (tUInt8)((tUInt8)1u & (DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5 >> 3u));
  DEF_a__h1418 = (tUInt8)((tUInt8)1u & (DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5 >> 1u));
  DEF_a__h1356 = (tUInt8)((tUInt8)1u & (DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5 >> 2u));
  DEF_a__h1480 = (tUInt8)((tUInt8)1u & DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5);
  DEF_b__h1889 = (tUInt8)(DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8 >> 7u);
  DEF_b__h994 = (tUInt8)((tUInt8)1u & (DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8 >> 6u));
  DEF_b__h1056 = (tUInt8)((tUInt8)1u & (DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8 >> 5u));
  DEF_b__h1255 = (tUInt8)((tUInt8)1u & (DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8 >> 3u));
  DEF_b__h1118 = (tUInt8)((tUInt8)1u & (DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8 >> 4u));
  DEF_b__h1357 = (tUInt8)((tUInt8)1u & (DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8 >> 2u));
  DEF_b__h1419 = (tUInt8)((tUInt8)1u & (DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8 >> 1u));
  DEF_b__h1481 = (tUInt8)((tUInt8)1u & DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8);
  DEF_realAns__h2137 = 511u & ((511u & ((((tUInt32)((tUInt8)0u)) << 8u) | (tUInt32)(DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5))) + (511u & ((((tUInt32)((tUInt8)0u)) << 8u) | (tUInt32)(DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8))));
  DEF_x__h1725 = DEF_a__h1418 ^ DEF_b__h1419;
  DEF_c__h1420 = DEF_a__h1480 & DEF_b__h1481;
  DEF_x__h1669 = DEF_a__h1356 ^ DEF_b__h1357;
  DEF_x__h1613 = DEF_a__h1254 ^ DEF_b__h1255;
  DEF_x__h2069 = DEF_a__h1117 ^ DEF_b__h1118;
  DEF_x__h2013 = DEF_a__h1055 ^ DEF_b__h1056;
  DEF_x__h1957 = DEF_a__h993 ^ DEF_b__h994;
  DEF_x__h1901 = DEF_a__h1888 ^ DEF_b__h1889;
  DEF_x__h278 = DEF_a__h1888 & DEF_b__h1889;
  DEF_x__h1008 = DEF_a__h993 & DEF_b__h994;
  DEF_x__h1070 = DEF_a__h1055 & DEF_b__h1056;
  DEF_x__h1132 = DEF_a__h1117 & DEF_b__h1118;
  DEF_x__h1269 = DEF_a__h1254 & DEF_b__h1255;
  DEF_x__h1371 = DEF_a__h1356 & DEF_b__h1357;
  DEF_y__h1432 = DEF_b__h1419 & DEF_c__h1420;
  DEF_x__h1433 = DEF_a__h1418 & DEF_b__h1419;
  DEF_y__h1434 = DEF_a__h1418 & DEF_c__h1420;
  DEF_x__h1431 = DEF_x__h1433 | DEF_y__h1434;
  DEF_c__h1358 = DEF_x__h1431 | DEF_y__h1432;
  DEF_y__h1370 = DEF_b__h1357 & DEF_c__h1358;
  DEF_y__h1372 = DEF_a__h1356 & DEF_c__h1358;
  DEF_x__h1369 = DEF_x__h1371 | DEF_y__h1372;
  DEF_c__h1256 = DEF_x__h1369 | DEF_y__h1370;
  DEF_y__h1268 = DEF_b__h1255 & DEF_c__h1256;
  DEF_y__h1270 = DEF_a__h1254 & DEF_c__h1256;
  DEF_x__h1267 = DEF_x__h1269 | DEF_y__h1270;
  DEF_c__h1119 = DEF_x__h1267 | DEF_y__h1268;
  DEF_y__h1131 = DEF_b__h1118 & DEF_c__h1119;
  DEF_y__h1133 = DEF_a__h1117 & DEF_c__h1119;
  DEF_x__h1130 = DEF_x__h1132 | DEF_y__h1133;
  DEF_c__h1057 = DEF_x__h1130 | DEF_y__h1131;
  DEF_y__h1069 = DEF_b__h1056 & DEF_c__h1057;
  DEF_y__h1071 = DEF_a__h1055 & DEF_c__h1057;
  DEF_x__h1068 = DEF_x__h1070 | DEF_y__h1071;
  DEF_c__h995 = DEF_x__h1068 | DEF_y__h1069;
  DEF_y__h1007 = DEF_b__h994 & DEF_c__h995;
  DEF_y__h1009 = DEF_a__h993 & DEF_c__h995;
  DEF_x__h1006 = DEF_x__h1008 | DEF_y__h1009;
  DEF_c__h1890 = DEF_x__h1006 | DEF_y__h1007;
  DEF_y__h277 = DEF_b__h1889 & DEF_c__h1890;
  DEF_y__h279 = DEF_a__h1888 & DEF_c__h1890;
  DEF_x__h276 = DEF_x__h278 | DEF_y__h279;
  DEF__theResult___fst__h200 = DEF_x__h276 | DEF_y__h277;
  DEF_x__h2300 = DEF_x__h679 + 1u;
  DEF_high__h191 = (tUInt8)31u & (((((DEF__theResult___fst__h200 << 4u) | ((DEF_x__h1901 ^ DEF_c__h1890) << 3u)) | ((DEF_x__h1957 ^ DEF_c__h995) << 2u)) | ((DEF_x__h2013 ^ DEF_c__h1057) << 1u)) | (DEF_x__h2069 ^ DEF_c__h1119));
  DEF_v__h186 = 511u & (((((((tUInt32)(DEF_high__h191)) << 4u) | (((tUInt32)(DEF_x__h1613 ^ DEF_c__h1256)) << 3u)) | (((tUInt32)(DEF_x__h1669 ^ DEF_c__h1358)) << 2u)) | (((tUInt32)(DEF_x__h1725 ^ DEF_c__h1420)) << 1u)) | (tUInt32)(DEF_a__h1480 ^ DEF_b__h1481));
  DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_7_ETC___d82 = DEF_v__h186 == DEF_realAns__h2137;
  DEF_NOT_cycle_EQ_8_AND_NOT_SEL_ARR_1_8_63_102_177__ETC___d85 = DEF_NOT_cycle_EQ_8___d3 && !DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_7_ETC___d82;
  DEF_NOT_cycle_EQ_8_AND_SEL_ARR_1_8_63_102_177_128__ETC___d83 = DEF_NOT_cycle_EQ_8___d3 && DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_7_ETC___d82;
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    if (DEF_cycle_EQ_8___d2)
      dollar_display(sim_hdl, this, "s", &__str_literal_1);
    if (DEF_cycle_EQ_8___d2)
      dollar_finish(sim_hdl, "32", 1u);
    if (DEF_NOT_cycle_EQ_8_AND_SEL_ARR_1_8_63_102_177_128__ETC___d83)
      dollar_display(sim_hdl,
		     this,
		     "s,8,8,9",
		     &__str_literal_2,
		     DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5,
		     DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8,
		     DEF_v__h186);
    if (DEF_NOT_cycle_EQ_8_AND_NOT_SEL_ARR_1_8_63_102_177__ETC___d85)
      dollar_display(sim_hdl,
		     this,
		     "s,8,8,9,9",
		     &__str_literal_3,
		     DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5,
		     DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8,
		     DEF_v__h186,
		     DEF_realAns__h2137);
    if (DEF_NOT_cycle_EQ_8_AND_NOT_SEL_ARR_1_8_63_102_177__ETC___d85)
      dollar_finish(sim_hdl, "32", 1u);
  }
  INST_cycle.METH_write(DEF_x__h2300);
}


/* Methods */


/* Reset routines */

void MOD_mkTbRCASimple::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_cycle.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkTbRCASimple::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkTbRCASimple::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_cycle.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkTbRCASimple::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 2u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  num = INST_cycle.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkTbRCASimple::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTbRCASimple &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkTbRCASimple::vcd_defs(tVCDDumpType dt, MOD_mkTbRCASimple &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
    }
}

void MOD_mkTbRCASimple::vcd_prims(tVCDDumpType dt, MOD_mkTbRCASimple &backing)
{
  INST_cycle.dump_VCD(dt, backing.INST_cycle);
}
