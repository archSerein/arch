/*
 * Generated by Bluespec Compiler, version 2024.01-19-g4cbd4f58 (build 4cbd4f58)
 * 
 * On Fri Jun 21 06:48:20 UTC 2024
 * 
 */
#include "bluesim_primitives.h"
#include "mkBfly4.h"


/* Constructor */
MOD_mkBfly4::MOD_mkBfly4(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent), __clk_handle_0(BAD_CLOCK_HANDLE), PORT_RST_N((tUInt8)1u)
{
  symbol_count = 0u;
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkBfly4::init_symbols_0()
{
}


/* Rule actions */


/* Methods */

tUInt64 MOD_mkBfly4::METH_bfly4(tUInt64 ARG_bfly4_t, tUInt64 ARG_bfly4_x)
{
  tUInt8 DEF_x__h1853;
  tUInt8 DEF_x__h1902;
  tUInt8 DEF_y__h1662;
  tUInt8 DEF_x__h1661;
  tUInt8 DEF_y__h1710;
  tUInt8 DEF_x__h1709;
  tUInt8 DEF_y__h1799;
  tUInt8 DEF_x__h1798;
  tUInt8 DEF_y__h1539;
  tUInt8 DEF_x__h1538;
  tUInt8 DEF_y__h1553;
  tUInt8 DEF_x__h1552;
  tUInt8 DEF_y__h1537;
  tUInt8 DEF_x__h1536;
  tUInt8 DEF_y__h1630;
  tUInt8 DEF_x__h1629;
  tUInt8 DEF_y__h1730;
  tUInt8 DEF_x__h1729;
  tUInt8 DEF_x__h1817;
  tUInt8 DEF_x__h1768;
  tUInt32 DEF_bfly4_x_BITS_15_TO_8_MUL_bfly4_t_BITS_15_TO_8__ETC___d72;
  tUInt8 DEF_x__h1728;
  tUInt8 DEF_x__h1599;
  tUInt8 DEF_x__h1535;
  tUInt8 DEF_x__h239;
  tUInt32 DEF_bfly4_x_BITS_15_TO_8_MUL_bfly4_t_BITS_15_TO_8__ETC___d69;
  tUInt8 DEF_y__h1541;
  tUInt8 DEF_y__h1544;
  tUInt8 DEF_y__h1555;
  tUInt8 DEF_y__h1558;
  tUInt8 DEF_y__h1547;
  tUInt8 DEF_y__h1550;
  tUInt8 DEF_y__h1561;
  tUInt8 DEF_y__h1564;
  tUInt8 DEF_x__h1543;
  tUInt8 DEF_x__h1540;
  tUInt8 DEF_x__h1557;
  tUInt8 DEF_x__h1554;
  tUInt8 DEF_x__h1549;
  tUInt8 DEF_x__h1546;
  tUInt8 DEF_x__h1563;
  tUInt8 DEF_x__h1560;
  tUInt8 DEF_ii__h866;
  tUInt8 DEF_rr__h865;
  tUInt8 DEF_rr__h1173;
  tUInt8 DEF_ii__h1174;
  tUInt8 DEF_rr__h1319;
  tUInt8 DEF_ii__h1320;
  tUInt8 DEF_rr__h1433;
  tUInt8 DEF_ii__h1434;
  tUInt8 DEF_ri__h868;
  tUInt8 DEF_ir__h867;
  tUInt8 DEF_ri__h1176;
  tUInt8 DEF_ir__h1175;
  tUInt8 DEF_ri__h1322;
  tUInt8 DEF_ir__h1321;
  tUInt8 DEF_ri__h1436;
  tUInt8 DEF_ir__h1435;
  tUInt64 PORT_bfly4;
  DEF_x__h1560 = (tUInt8)(ARG_bfly4_x >> 56u);
  DEF_x__h1563 = (tUInt8)((tUInt8)255u & (ARG_bfly4_x >> 48u));
  DEF_x__h1546 = (tUInt8)((tUInt8)255u & (ARG_bfly4_x >> 40u));
  DEF_x__h1554 = (tUInt8)((tUInt8)255u & (ARG_bfly4_x >> 24u));
  DEF_x__h1549 = (tUInt8)((tUInt8)255u & (ARG_bfly4_x >> 32u));
  DEF_x__h1557 = (tUInt8)((tUInt8)255u & (ARG_bfly4_x >> 16u));
  DEF_x__h1540 = (tUInt8)((tUInt8)255u & (ARG_bfly4_x >> 8u));
  DEF_x__h1543 = (tUInt8)((tUInt8)255u & ARG_bfly4_x);
  DEF_y__h1564 = (tUInt8)(ARG_bfly4_t >> 56u);
  DEF_ir__h1435 = (tUInt8)((tUInt8)255u & (65535u & (((tUInt32)(DEF_x__h1563)) * ((tUInt32)(DEF_y__h1564)))));
  DEF_rr__h1433 = (tUInt8)((tUInt8)255u & (65535u & (((tUInt32)(DEF_x__h1560)) * ((tUInt32)(DEF_y__h1564)))));
  DEF_y__h1561 = (tUInt8)((tUInt8)255u & (ARG_bfly4_t >> 48u));
  DEF_ri__h1436 = (tUInt8)((tUInt8)255u & (65535u & (((tUInt32)(DEF_x__h1560)) * ((tUInt32)(DEF_y__h1561)))));
  DEF_ii__h1434 = (tUInt8)((tUInt8)255u & (65535u & (((tUInt32)(DEF_x__h1563)) * ((tUInt32)(DEF_y__h1561)))));
  DEF_y__h1550 = (tUInt8)((tUInt8)255u & (ARG_bfly4_t >> 40u));
  DEF_ir__h1175 = (tUInt8)((tUInt8)255u & (65535u & (((tUInt32)(DEF_x__h1549)) * ((tUInt32)(DEF_y__h1550)))));
  DEF_rr__h1173 = (tUInt8)((tUInt8)255u & (65535u & (((tUInt32)(DEF_x__h1546)) * ((tUInt32)(DEF_y__h1550)))));
  DEF_y__h1547 = (tUInt8)((tUInt8)255u & (ARG_bfly4_t >> 32u));
  DEF_ri__h1176 = (tUInt8)((tUInt8)255u & (65535u & (((tUInt32)(DEF_x__h1546)) * ((tUInt32)(DEF_y__h1547)))));
  DEF_ii__h1174 = (tUInt8)((tUInt8)255u & (65535u & (((tUInt32)(DEF_x__h1549)) * ((tUInt32)(DEF_y__h1547)))));
  DEF_y__h1558 = (tUInt8)((tUInt8)255u & (ARG_bfly4_t >> 24u));
  DEF_ir__h1321 = (tUInt8)((tUInt8)255u & (65535u & (((tUInt32)(DEF_x__h1557)) * ((tUInt32)(DEF_y__h1558)))));
  DEF_rr__h1319 = (tUInt8)((tUInt8)255u & (65535u & (((tUInt32)(DEF_x__h1554)) * ((tUInt32)(DEF_y__h1558)))));
  DEF_y__h1555 = (tUInt8)((tUInt8)255u & (ARG_bfly4_t >> 16u));
  DEF_ri__h1322 = (tUInt8)((tUInt8)255u & (65535u & (((tUInt32)(DEF_x__h1554)) * ((tUInt32)(DEF_y__h1555)))));
  DEF_ii__h1320 = (tUInt8)((tUInt8)255u & (65535u & (((tUInt32)(DEF_x__h1557)) * ((tUInt32)(DEF_y__h1555)))));
  DEF_y__h1544 = (tUInt8)((tUInt8)255u & (ARG_bfly4_t >> 8u));
  DEF_ir__h867 = (tUInt8)((tUInt8)255u & (65535u & (((tUInt32)(DEF_x__h1543)) * ((tUInt32)(DEF_y__h1544)))));
  DEF_rr__h865 = (tUInt8)((tUInt8)255u & (65535u & (((tUInt32)(DEF_x__h1540)) * ((tUInt32)(DEF_y__h1544)))));
  DEF_y__h1541 = (tUInt8)((tUInt8)255u & ARG_bfly4_t);
  DEF_ri__h868 = (tUInt8)((tUInt8)255u & (65535u & (((tUInt32)(DEF_x__h1540)) * ((tUInt32)(DEF_y__h1541)))));
  DEF_ii__h866 = (tUInt8)((tUInt8)255u & (65535u & (((tUInt32)(DEF_x__h1543)) * ((tUInt32)(DEF_y__h1541)))));
  DEF_x__h1552 = (tUInt8)255u & (DEF_ri__h1322 + DEF_ir__h1321);
  DEF_y__h1553 = (tUInt8)255u & (DEF_ri__h1436 + DEF_ir__h1435);
  DEF_y__h1730 = (tUInt8)255u & (DEF_x__h1552 + DEF_y__h1553);
  DEF_y__h1537 = (tUInt8)255u & (DEF_x__h1552 - DEF_y__h1553);
  DEF_x__h1538 = (tUInt8)255u & (DEF_ri__h868 + DEF_ir__h867);
  DEF_y__h1539 = (tUInt8)255u & (DEF_ri__h1176 + DEF_ir__h1175);
  DEF_x__h1729 = (tUInt8)255u & (DEF_x__h1538 + DEF_y__h1539);
  DEF_x__h1728 = (tUInt8)255u & (DEF_x__h1729 - DEF_y__h1730);
  DEF_x__h1536 = (tUInt8)255u & (DEF_x__h1538 - DEF_y__h1539);
  DEF_x__h1535 = (tUInt8)255u & (DEF_x__h1536 - DEF_y__h1537);
  DEF_x__h1817 = (tUInt8)255u & (DEF_x__h1536 + DEF_y__h1537);
  DEF_x__h1709 = (tUInt8)255u & (DEF_rr__h1319 - DEF_ii__h1320);
  DEF_y__h1710 = (tUInt8)255u & (DEF_rr__h1433 - DEF_ii__h1434);
  DEF_y__h1630 = (tUInt8)255u & (DEF_x__h1709 + DEF_y__h1710);
  DEF_y__h1799 = (tUInt8)255u & (DEF_x__h1709 - DEF_y__h1710);
  DEF_x__h1661 = (tUInt8)255u & (DEF_rr__h865 - DEF_ii__h866);
  DEF_y__h1662 = (tUInt8)255u & (DEF_rr__h1173 - DEF_ii__h1174);
  DEF_x__h1629 = (tUInt8)255u & (DEF_x__h1661 + DEF_y__h1662);
  DEF_x__h1599 = (tUInt8)255u & (DEF_x__h1629 - DEF_y__h1630);
  DEF_x__h1798 = (tUInt8)255u & (DEF_x__h1661 - DEF_y__h1662);
  DEF_x__h239 = (tUInt8)255u & (DEF_x__h1798 - DEF_y__h1799);
  DEF_bfly4_x_BITS_15_TO_8_MUL_bfly4_t_BITS_15_TO_8__ETC___d69 = (((((tUInt32)(DEF_x__h239)) << 24u) | (((tUInt32)(DEF_x__h1535)) << 16u)) | (((tUInt32)(DEF_x__h1599)) << 8u)) | (tUInt32)(DEF_x__h1728);
  DEF_x__h1768 = (tUInt8)255u & (DEF_x__h1798 + DEF_y__h1799);
  DEF_bfly4_x_BITS_15_TO_8_MUL_bfly4_t_BITS_15_TO_8__ETC___d72 = 65535u & ((((tUInt32)(DEF_x__h1768)) << 8u) | (tUInt32)(DEF_x__h1817));
  DEF_x__h1902 = (tUInt8)255u & (DEF_x__h1729 + DEF_y__h1730);
  DEF_x__h1853 = (tUInt8)255u & (DEF_x__h1629 + DEF_y__h1630);
  PORT_bfly4 = (((((tUInt64)(DEF_bfly4_x_BITS_15_TO_8_MUL_bfly4_t_BITS_15_TO_8__ETC___d69)) << 32u) | (((tUInt64)(DEF_bfly4_x_BITS_15_TO_8_MUL_bfly4_t_BITS_15_TO_8__ETC___d72)) << 16u)) | (((tUInt64)(DEF_x__h1853)) << 8u)) | (tUInt64)(DEF_x__h1902);
  return PORT_bfly4;
}

tUInt8 MOD_mkBfly4::METH_RDY_bfly4()
{
  tUInt8 DEF_CAN_FIRE_bfly4;
  tUInt8 PORT_RDY_bfly4;
  DEF_CAN_FIRE_bfly4 = (tUInt8)1u;
  PORT_RDY_bfly4 = DEF_CAN_FIRE_bfly4;
  return PORT_RDY_bfly4;
}


/* Reset routines */

void MOD_mkBfly4::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkBfly4::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkBfly4::dump_state(unsigned int indent)
{
}


/* VCD dumping routines */

unsigned int MOD_mkBfly4::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 1u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkBfly4::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkBfly4 &backing)
{
  vcd_defs(dt, backing);
}

void MOD_mkBfly4::vcd_defs(tVCDDumpType dt, MOD_mkBfly4 &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
    }
}
